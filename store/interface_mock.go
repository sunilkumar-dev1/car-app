// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package store is a generated GoMock package.
package store

import (
	entities "CarApp/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBrandInterface is a mock of BrandInterface interface.
type MockBrandInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBrandInterfaceMockRecorder
}

// MockBrandInterfaceMockRecorder is the mock recorder for MockBrandInterface.
type MockBrandInterfaceMockRecorder struct {
	mock *MockBrandInterface
}

// NewMockBrandInterface creates a new mock instance.
func NewMockBrandInterface(ctrl *gomock.Controller) *MockBrandInterface {
	mock := &MockBrandInterface{ctrl: ctrl}
	mock.recorder = &MockBrandInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrandInterface) EXPECT() *MockBrandInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBrandInterface) Create(brand *entities.Brand) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", brand)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBrandInterfaceMockRecorder) Create(brand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBrandInterface)(nil).Create), brand)
}

// Delete mocks base method.
func (m *MockBrandInterface) Delete(id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockBrandInterfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBrandInterface)(nil).Delete), id)
}

// GetById mocks base method.
func (m *MockBrandInterface) GetById(id int) (entities.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(entities.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockBrandInterfaceMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockBrandInterface)(nil).GetById), id)
}

// Update mocks base method.
func (m *MockBrandInterface) Update(id int, name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBrandInterfaceMockRecorder) Update(id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBrandInterface)(nil).Update), id, name)
}

// MockModelInterface is a mock of ModelInterface interface.
type MockModelInterface struct {
	ctrl     *gomock.Controller
	recorder *MockModelInterfaceMockRecorder
}

// MockModelInterfaceMockRecorder is the mock recorder for MockModelInterface.
type MockModelInterfaceMockRecorder struct {
	mock *MockModelInterface
}

// NewMockModelInterface creates a new mock instance.
func NewMockModelInterface(ctrl *gomock.Controller) *MockModelInterface {
	mock := &MockModelInterface{ctrl: ctrl}
	mock.recorder = &MockModelInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelInterface) EXPECT() *MockModelInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockModelInterface) Create(model *entities.Models) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", model)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockModelInterfaceMockRecorder) Create(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockModelInterface)(nil).Create), model)
}

// Delete mocks base method.
func (m *MockModelInterface) Delete(id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockModelInterfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockModelInterface)(nil).Delete), id)
}

// GetById mocks base method.
func (m *MockModelInterface) GetById(id int) (entities.Models, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(entities.Models)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockModelInterfaceMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockModelInterface)(nil).GetById), id)
}

// Update mocks base method.
func (m *MockModelInterface) Update(id int, name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockModelInterfaceMockRecorder) Update(id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockModelInterface)(nil).Update), id, name)
}

// MockVariantInterface is a mock of VariantInterface interface.
type MockVariantInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVariantInterfaceMockRecorder
}

// MockVariantInterfaceMockRecorder is the mock recorder for MockVariantInterface.
type MockVariantInterfaceMockRecorder struct {
	mock *MockVariantInterface
}

// NewMockVariantInterface creates a new mock instance.
func NewMockVariantInterface(ctrl *gomock.Controller) *MockVariantInterface {
	mock := &MockVariantInterface{ctrl: ctrl}
	mock.recorder = &MockVariantInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVariantInterface) EXPECT() *MockVariantInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVariantInterface) Create(variant *entities.Variant) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", variant)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVariantInterfaceMockRecorder) Create(variant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVariantInterface)(nil).Create), variant)
}

// Delete mocks base method.
func (m *MockVariantInterface) Delete(id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockVariantInterfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVariantInterface)(nil).Delete), id)
}

// GetById mocks base method.
func (m *MockVariantInterface) GetById(id int) (entities.Variant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(entities.Variant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockVariantInterfaceMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockVariantInterface)(nil).GetById), id)
}

// Update mocks base method.
func (m *MockVariantInterface) Update(id int, name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVariantInterfaceMockRecorder) Update(id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVariantInterface)(nil).Update), id, name)
}
